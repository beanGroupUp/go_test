// 指定使用 Protocol Buffers 第3版语法

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0--rc2
// source: food.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FoodService_SayName_FullMethodName    = "/FoodService/SayName"
	FoodService_PostName_FullMethodName   = "/FoodService/PostName"
	FoodService_FullStream_FullMethodName = "/FoodService/FullStream"
)

// FoodServiceClient is the client API for FoodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 定义一个名为FoodService的服务
type FoodServiceClient interface {
	// 定义一个RPC方法：SayName（服务端流模式）
	// 客户端发送单个请求，服务端返回多个响应（流式响应）
	SayName(ctx context.Context, in *FoodStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FoodStreamResponse], error)
	// 定义一个RPC方法：PostName（客户端流模式）
	// 客户端发送多个请求（流式请求），服务端返回单个响应
	PostName(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FoodStreamRequest, FoodStreamResponse], error)
	// 定义一个RPC方法：FullStream（双向流模式）
	// 客户端和服务端都可以发送多个消息（双向流式通信）
	FullStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FoodStreamRequest, FoodStreamResponse], error)
}

type foodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodServiceClient(cc grpc.ClientConnInterface) FoodServiceClient {
	return &foodServiceClient{cc}
}

func (c *foodServiceClient) SayName(ctx context.Context, in *FoodStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FoodStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[0], FoodService_SayName_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FoodStreamRequest, FoodStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_SayNameClient = grpc.ServerStreamingClient[FoodStreamResponse]

func (c *foodServiceClient) PostName(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FoodStreamRequest, FoodStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[1], FoodService_PostName_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FoodStreamRequest, FoodStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_PostNameClient = grpc.ClientStreamingClient[FoodStreamRequest, FoodStreamResponse]

func (c *foodServiceClient) FullStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FoodStreamRequest, FoodStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodService_ServiceDesc.Streams[2], FoodService_FullStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FoodStreamRequest, FoodStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_FullStreamClient = grpc.BidiStreamingClient[FoodStreamRequest, FoodStreamResponse]

// FoodServiceServer is the server API for FoodService service.
// All implementations must embed UnimplementedFoodServiceServer
// for forward compatibility.
//
// 定义一个名为FoodService的服务
type FoodServiceServer interface {
	// 定义一个RPC方法：SayName（服务端流模式）
	// 客户端发送单个请求，服务端返回多个响应（流式响应）
	SayName(*FoodStreamRequest, grpc.ServerStreamingServer[FoodStreamResponse]) error
	// 定义一个RPC方法：PostName（客户端流模式）
	// 客户端发送多个请求（流式请求），服务端返回单个响应
	PostName(grpc.ClientStreamingServer[FoodStreamRequest, FoodStreamResponse]) error
	// 定义一个RPC方法：FullStream（双向流模式）
	// 客户端和服务端都可以发送多个消息（双向流式通信）
	FullStream(grpc.BidiStreamingServer[FoodStreamRequest, FoodStreamResponse]) error
	mustEmbedUnimplementedFoodServiceServer()
}

// UnimplementedFoodServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFoodServiceServer struct{}

func (UnimplementedFoodServiceServer) SayName(*FoodStreamRequest, grpc.ServerStreamingServer[FoodStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SayName not implemented")
}
func (UnimplementedFoodServiceServer) PostName(grpc.ClientStreamingServer[FoodStreamRequest, FoodStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PostName not implemented")
}
func (UnimplementedFoodServiceServer) FullStream(grpc.BidiStreamingServer[FoodStreamRequest, FoodStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FullStream not implemented")
}
func (UnimplementedFoodServiceServer) mustEmbedUnimplementedFoodServiceServer() {}
func (UnimplementedFoodServiceServer) testEmbeddedByValue()                     {}

// UnsafeFoodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodServiceServer will
// result in compilation errors.
type UnsafeFoodServiceServer interface {
	mustEmbedUnimplementedFoodServiceServer()
}

func RegisterFoodServiceServer(s grpc.ServiceRegistrar, srv FoodServiceServer) {
	// If the following call pancis, it indicates UnimplementedFoodServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FoodService_ServiceDesc, srv)
}

func _FoodService_SayName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FoodStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodServiceServer).SayName(m, &grpc.GenericServerStream[FoodStreamRequest, FoodStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_SayNameServer = grpc.ServerStreamingServer[FoodStreamResponse]

func _FoodService_PostName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FoodServiceServer).PostName(&grpc.GenericServerStream[FoodStreamRequest, FoodStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_PostNameServer = grpc.ClientStreamingServer[FoodStreamRequest, FoodStreamResponse]

func _FoodService_FullStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FoodServiceServer).FullStream(&grpc.GenericServerStream[FoodStreamRequest, FoodStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodService_FullStreamServer = grpc.BidiStreamingServer[FoodStreamRequest, FoodStreamResponse]

// FoodService_ServiceDesc is the grpc.ServiceDesc for FoodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FoodService",
	HandlerType: (*FoodServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayName",
			Handler:       _FoodService_SayName_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostName",
			Handler:       _FoodService_PostName_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FullStream",
			Handler:       _FoodService_FullStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "food.proto",
}
